generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                @id @default(autoincrement()) //database id
  userType                 UserType           @relation(fields: [userTypeId], references: [id]) //user 구분
  userTypeId               Int
  name                     String //본명
  phone                    String             @unique //핸드폰번호 (실직적인 user Id)
  password                 String //비밀번호
  birth                    String //생년월일
  gender                   String //성별
  sms                      Boolean //이벤트 혜택 수신
  status                   String //user 상태 (정상, 차단, 탈퇴 등)
  recommendUserId          Int?               @default(1) //내가 추천한 회원 id
  license                  String? //사업자등록증 url
  vehiclePermission        String? //화물자동차 운송사업 허가증 url
  companyName              String? //회사 이름
  companyPersonName        String? //회사 담당자 이름
  vehicle                  Vehicle[] //차량정보
  workCategory             WorkCategory?      @relation(fields: [workCategoryId], references: [id])
  workCategoryId           Int?
  workRegion               Region[]           @relation("userWorkRegion")
  avatar                   String? //프로필 사진 url
  greeting                 String? //인사말
  accessedRegion           String? //마지막 접속 지역
  withdrawalDate           DateTime? //탈퇴날짜 //NEXT: timezone
  grade                    Grade              @relation(fields: [gradeId], references: [id]) //회원 등급
  gradeId                  Int
  point                    Point?
  pointBreakdown           PointBreakdown[] //포인트 내역
  order                    Order[]
  orderReservation         OrderReservation[]
  createdAt                DateTime
  updatedAt                DateTime
  pushToken                String?
  membership               Boolean            @default(false)
  membershipDate           DateTime?
  finalMembershipDate      DateTime?
  withdrawalMembershipDate DateTime?
  r_pack                   Boolean?           @default(false)
  gugupack                 Boolean?           @default(false)
  VBankOrder               VBankOrder[]
  reservationBlock         Boolean            @default(false)
}

model UserType {
  id   Int    @id @default(autoincrement())
  type String //일반회원(NORMAL), 기사회원(DRIVER), 기업회원(COMPANY)
  User User[]
}

model Vehicle {
  id              Int            @id @default(autoincrement())
  number          String
  type            VehicleType    @relation(fields: [vehicleTypeId], references: [id])
  vehicleTypeId   Int
  floor           VehicleFloor?  @relation(fields: [vehicleFloorId], references: [id])
  vehicleFloorId  Int?
  User            User?          @relation(fields: [userId], references: [id])
  userId          Int?
  weight          VehicleWeight? @relation(fields: [vehicleWeightId], references: [id])
  vehicleWeightId Int?
}

// C:건설, F:가구, E:가전, H:청소인력), M:이사, G:기타
model WorkCategory {
  id   Int    @id @default(autoincrement())
  name String
  code String
  user User[]
}

model Region {
  id         Int          @id @default(autoincrement())
  region     String //작업지역
  user       User[]       @relation("userWorkRegion")
  order      Order[]
  VBankOrder VBankOrder[]
}

model Point {
  id              Int     @id @default(autoincrement())
  curPoint        Int //현재 포인트
  accountName     String? //예금주
  accountNumber   String? //계좌번호
  bank            String? //은행
  accruedPoint    Int     @default(0) //누적포인트
  withdrawalPoint Int     @default(0) //출금포인트
  subtractPoint   Int     @default(0) //차감포인트
  addPoint        Int     @default(0) //지급포인트
  user            User    @relation(fields: [userId], references: [id])
  userId          Int     @unique
}

model PointBreakdown {
  id        Int      @id @default(autoincrement())
  date      DateTime //충전, 출금, 지급, 차감 날짜
  content   String //포인트 내역 내용
  type      String //충전, 출금, 지급, 차감
  point     Int //거래 포인트
  restPoint Int //나머지 포인트
  memo      String? //특이사항
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Grade {
  id    Int    @id @default(autoincrement())
  grade String //회원 등급
  user  User[]
}

model Order {
  id                  Int                @id @default(autoincrement())
  registUser          User               @relation(fields: [userId], references: [id]) //등록자
  userId              Int
  acceptUser          Int? //작업자
  createdAt           DateTime //등록날짜, 시간 
  updatedAt           DateTime
  vehicleType         String //1:사다리차 2:스카이차
  direction           String? //올림, 내림, 양사
  floor               String? //작업 층 (올림, 내림일 경우)
  downFloor           String? //작업 층 (양사일 경우)
  upFloor             String? //작업 층 (양사일 경우)
  volume              String //물량, 시간
  time                String? //volume === "시간"
  quantity            String? //volume === "물량"
  dateTime            String //작업날짜, 시간
  address1            String //작업주소1
  address2            String? //작업주소2 (양사일 경우)
  detailAddress1      String //작업주소1 상세
  detailAddress2      String? //작업주소2 상세 (양사일 경우)
  simpleAddress1      String? //api 조회를 위한 간략한 작업주소1
  simpleAddress2      String? //api 조회를 위한 간략한 작업주소2
  region              Region?            @relation(fields: [regionId], references: [id])
  regionId            Int?
  latitude            String?
  longitude           String?
  phone               String //등록자 전화번호
  directPhone         String? //현장 전화번호
  emergency           Boolean //긴급오더 여부
  memo                String? //메모
  price               Int //운임
  emergencyPrice      Int?               @default(0) //긴급작업비용
  usePoint            Int //사용포인트
  orderPrice          Int //작업운임
  totalPrice          Int //총결제금액
  rPackPrice          Int                @default(0) //알팩회원 할인비
  gugupackPrice       Int                @default(0) //구구팩 회원 할인비
  tax                 Int //부가세
  finalPrice          Int //최종결제금액
  recommendationPoint Int //추천인포인트
  registPoint         Int //작업등록포인트
  orderPoint          Int //작업완료포인트
  savePoint           Int? //적립 예정 포인트 //TODO: 삭제
  status              OrderStatus        @relation(fields: [orderStatusId], references: [id]) //작업 상태 (작업요청, 작업예약, 작업 중, 작업완료)
  orderStatusId       Int
  orderReservation    OrderReservation[] //예약대기
  pushStatus          String? //BEFORE_24HOURS, BEFORE_12HOURS, BEFORE_2HOURS, BEFORE_10MINS, AFTER_WORKDATETIME, DONE
}

model VBankOrder {
  id                  Int                @id @default(autoincrement())
  registUser          User               @relation(fields: [userId], references: [id]) //등록자
  userId              Int
  acceptUser          Int? //작업자
  createdAt           DateTime //등록날짜, 시간 
  updatedAt           DateTime
  vehicleType         String //1:사다리차 2:스카이차
  direction           String? //올림, 내림, 양사
  floor               String? //작업 층 (올림, 내림일 경우)
  downFloor           String? //작업 층 (양사일 경우)
  upFloor             String? //작업 층 (양사일 경우)
  volume              String //물량, 시간
  time                String? //volume === "시간"
  quantity            String? //volume === "물량"
  dateTime            String //작업날짜, 시간
  address1            String //작업주소1
  address2            String? //작업주소2 (양사일 경우)
  detailAddress1      String //작업주소1 상세
  detailAddress2      String? //작업주소2 상세 (양사일 경우)
  simpleAddress1      String? //api 조회를 위한 간략한 작업주소1
  simpleAddress2      String? //api 조회를 위한 간략한 작업주소2
  region              Region?            @relation(fields: [regionId], references: [id])
  regionId            Int?
  latitude            String?
  longitude           String?
  phone               String //등록자 전화번호
  directPhone         String? //현장 전화번호
  emergency           Boolean //긴급오더 여부
  memo                String? //메모
  price               Int //운임
  emergencyPrice      Int?               @default(0) //긴급작업비용
  usePoint            Int //사용포인트
  orderPrice          Int //작업운임
  totalPrice          Int //총결제금액
  rPackPrice          Int                @default(0) //알팩회원 할인비
  gugupackPrice       Int                @default(0) //구구팩 회원 할인비
  tax                 Int //부가세
  finalPrice          Int //최종결제금액
  recommendationPoint Int //추천인포인트
  registPoint         Int //작업등록포인트
  orderPoint          Int //작업완료포인트
  savePoint           Int? //적립 예정 포인트 //TODO: 삭제
  status              OrderStatus        @relation(fields: [orderStatusId], references: [id]) //작업 상태 (작업요청, 작업예약, 작업 중, 작업완료)
  orderStatusId       Int
  orderReservation    OrderReservation[] //예약대기
  pushStatus          String? //BEFORE_24HOURS, BEFORE_12HOURS, BEFORE_2HOURS, BEFORE_10MINS, AFTER_WORKDATETIME, DONE
  standBy             Boolean            @default(true)
  receipt_id          String             @unique
  vbank_account       String
  vbank_code          String
  vbank_name          String
  vbank_expired_at    String
  vbank_tid           String
}

model Commission {
  id         Int   @id @default(autoincrement())
  commission Float //수수료
}

model OrderTheme {
  id     Int    @id @default(autoincrement())
  type   String //상차, 하차, 양사
  height String //저층, 중층, 상층
  price  Int //작업 금액
}

model OrderStatus {
  id         Int          @id @default(autoincrement())
  status     String //작업요청, 작업예약, 작업 중, 작업완료
  order      Order[]
  VBankOrder VBankOrder[]
}

model OrderReservation {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  order        Order       @relation(fields: [orderId], references: [id])
  orderId      Int
  VBankOrder   VBankOrder? @relation(fields: [vBankOrderId], references: [id])
  vBankOrderId Int?
}

model VehicleType {
  id      Int       @id @default(autoincrement())
  type    String // ex) 스카이, 사다리
  Vehicle Vehicle[]
}

model VehicleWeight {
  id      Int       @id @default(autoincrement())
  weight  String // ex) 1톤, 2톤
  Vehicle Vehicle[]
}

model VehicleFloor {
  id      Int       @id @default(autoincrement())
  floor   String // ex) 10층, 15층
  Vehicle Vehicle[]
}

model Manager {
  id         Int      @id @default(autoincrement())
  managerId  String //관리자 ID
  password   String //관리자 PASSWORD
  accessedAt DateTime //마지막 접속 날짜 //NEXT: timezone
  Notice     Notice[]
}

model Notice {
  id          Int     @id @default(autoincrement())
  manager     Manager @relation(fields: [managerId], references: [id])
  managerId   Int
  title       String?
  body        String?
  performance String?
}

model Admin {
  id        Int      @id @default(autoincrement()) //database id
  userId    String   @unique //user 아이디 
  name      String //이름
  password  String //비밀번호
  gender    String //성별
  phone     String //휴대폰번호
  position  String //직급
  email     String //이메일
  status    Boolean //활성화 여부
  createdAt DateTime
  updatedAt DateTime
}

model Banner {
  id       Int     @id @default(autoincrement())
  imageUrl String?
  link     String?
}

model AdminData {
  id              Int     @id @default(autoincrement()) //database id
  kakaoUrl        String?
  r_packPrice     Int     @default(0)
  gugupackPrice   Int     @default(0)
  membershipPrice Int     @default(0)
  popupUrl        String?
}

model LadderQuantityOption {
  id                  Int                   @id @default(autoincrement())
  title               String
  LadderQuantityPrice LadderQuantityPrice[]
}

model LadderQuantityPrice {
  id       Int                  @id @default(autoincrement())
  option   LadderQuantityOption @relation(fields: [optionId], references: [id])
  optionId Int
  price    Int                  @default(0)
  floor    Int

  @@unique([optionId, floor], name: "identifier")
}

model LadderTimeOption {
  id              Int               @id @default(autoincrement())
  title           String
  LadderTimePrice LadderTimePrice[]
}

model LadderTimePrice {
  id       Int              @id @default(autoincrement())
  option   LadderTimeOption @relation(fields: [optionId], references: [id])
  optionId Int
  price    Int              @default(0)
  floor    Int

  @@unique([optionId, floor], name: "identifier")
}

model SkyTimeOption {
  id           Int            @id @default(autoincrement())
  title        String
  SkyTimePrice SkyTimePrice[]
}

model SkyTimeWeight {
  id           Int            @id @default(autoincrement())
  weightTitle  String
  SkyTimePrice SkyTimePrice[]
}

model SkyTimePrice {
  id       Int           @id @default(autoincrement())
  optoin   SkyTimeOption @relation(fields: [optionId], references: [id])
  optionId Int
  price    Int           @default(0)
  weight   SkyTimeWeight @relation(fields: [weightId], references: [id])
  weightId Int

  @@unique([optionId, weightId], name: "identifier")
}
